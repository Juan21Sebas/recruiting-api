// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	model "RECRUITING-API/internal/pkg/entity/model"

	schema "RECRUITING-API/internal/pkg/entity/schema"
)

// CommunicationServices is an autogenerated mock type for the CommunicationServices type
type CommunicationServices struct {
	mock.Mock
}

// CreateCandidates provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) CreateCandidates(ctx *gin.Context, request *model.CreateCandidate) (*schema.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateCandidates")
	}

	var r0 *schema.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.CreateCandidate) (*schema.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.CreateCandidate) *schema.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *model.CreateCandidate) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCandidates provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) DeleteCandidates(ctx *gin.Context, request *model.DeleteCandidate) (*schema.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCandidates")
	}

	var r0 *schema.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.DeleteCandidate) (*schema.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.DeleteCandidate) *schema.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *model.DeleteCandidate) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCandidates provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) SelectCandidates(ctx *gin.Context, request *model.GetCandidate) (*schema.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectCandidates")
	}

	var r0 *schema.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.GetCandidate) (*schema.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.GetCandidate) *schema.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *model.GetCandidate) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCandidates provides a mock function with given fields: ctx, request
func (_m *CommunicationServices) UpdateCandidates(ctx *gin.Context, request *model.UpdateCandidate) (*schema.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCandidates")
	}

	var r0 *schema.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.UpdateCandidate) (*schema.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *model.UpdateCandidate) *schema.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *model.UpdateCandidate) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommunicationServices creates a new instance of CommunicationServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommunicationServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommunicationServices {
	mock := &CommunicationServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
